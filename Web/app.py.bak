import mysql.connector
from werkzeug.security import check_password_hash
from flask import Flask, render_template, request, redirect, url_for
import logging

app = Flask(__name__)

logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

# 로컬 데이터베이스 연결 설정 함수
def get_local_db_connection():
    try:
        return mysql.connector.connect(
            host='localhost',
            user='root',
            password='2022Dlcmdls!@',
            database='portal'
        )
    except Exception as e:
        logging.error("Local database connection failed: %s", e)
        raise

# 외부 데이터베이스 연결 설정 함수
def get_external_db_connection():
    try:
        return mysql.connector.connect(
            host='61.97.248.8',
            user='root',
            password='2022Dlcmdls!@',
            database='portal',
            port=13306
        )
    except Exception as e:
        logging.error("External database connection failed: %s", e)
        raise



@app.route('/login', methods=['GET', 'POST'])
def login():
    error = None
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']

        # 데이터베이스 연결 및 사용자 정보 조회
        conn = get_local_db_connection()
        cursor = conn.cursor(dictionary=True)
        cursor.execute("SELECT * FROM users WHERE username = %s", (username,))
        user = cursor.fetchone()
        cursor.close()
        conn.close()

        # 사용자 정보가 있고, 비밀번호가 일치하는지 검증
        if user and check_password_hash(user['password_hash'], password):
            # 로그인 성공: 사용자 세션 생성, 홈 페이지로 리디렉션 등의 처리
            # 예: session['user_id'] = user['id']
            return redirect(url_for('home'))
        else:
            error = 'Invalid username or password'

    # GET 요청 또는 로그인 실패 시 로그인 페이지를 다시 렌더링
    return render_template('login.html', error=error)





@app.route('/')
def home():
    try:
        external_connection = get_external_db_connection()
        local_connection = get_local_db_connection()

        # 외부 데이터베이스에서 장치 정보를 조회
        external_cursor = external_connection.cursor(dictionary=True)
        external_cursor.execute("SELECT d.device_id, c.customer_nm, d.host_nm, d.serial_num FROM tb_device d JOIN tb_customer c ON d.customer_id = c.customer_id")
        devices = external_cursor.fetchall()
        external_cursor.close()
        external_connection.close()

        # 로컬 데이터베이스에서 체크 상태를 조회
        local_cursor = local_connection.cursor(dictionary=True)
        local_cursor.execute("SELECT device_id, external_device_id, sms_check, email_check FROM tb_device_checks")
        checks = local_cursor.fetchall()
        local_cursor.close()
        local_connection.close()

        # 체크 상태를 장치 정보에 매핑
        for device in devices:
            device['sms_checked'] = 'Y'
            device['email_checked'] = 'Y'
            for check in checks:
                if str(device['device_id']) == str(check['device_id']):
                    device['sms_checked'] = check['sms_check']
                    device['email_checked'] = check['email_check']

    except Exception as e:
        logging.error("Error fetching data: %s", e)
        devices = []  # 오류 발생 시 빈 리스트 반환

    return render_template('home.html', devices=devices)


@app.route('/test')
def test_page():
    return render_template('test.html')




@app.route('/submit', methods=['POST'])
def submit():
    try:
        external_connection = get_external_db_connection()
        local_connection = get_local_db_connection()

        for external_device_id in request.form.getlist('external_device_id'):
            # 외부 DB에서 해당 device_id의 정보를 조회
            external_cursor = external_connection.cursor(dictionary=True)
            external_cursor.execute("SELECT d.device_id, c.customer_nm, d.host_nm, d.serial_num FROM tb_device d JOIN tb_customer c ON d.customer_id = c.customer_id WHERE d.device_id = %s", (external_device_id,))
            device_info = external_cursor.fetchone()
            external_cursor.close()

            if device_info:
                # 폼에서 제공된 SMS와 Email 체크 여부
                sms_check = 'Y' if f'sms_check_{external_device_id}' in request.form else 'N'
                email_check = 'Y' if f'email_check_{external_device_id}' in request.form else 'N'

                # 조회한 정보와 함께 로컬 DB에 저장
                local_cursor = local_connection.cursor()
                insert_query = '''INSERT INTO tb_device_checks (device_id, customer_name, host_name, serial_num, sms_check, email_check)
                  VALUES (%s, %s, %s, %s, %s, %s)
                  ON DUPLICATE KEY UPDATE customer_name = VALUES(customer_name), host_name = VALUES(host_name), serial_num = VALUES(serial_num), sms_check = VALUES(sms_check), email_check = VALUES(email_check)'''
                local_cursor.execute(insert_query, (external_device_id, device_info['customer_nm'], device_info['host_nm'], device_info['serial_num'], sms_check, email_check))
                local_connection.commit()
                local_cursor.close()

        external_connection.close()
        local_connection.close()
    except Exception as e:
        logging.error("Error during form submission: %s", e)

    return redirect(url_for('home'))




if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)

